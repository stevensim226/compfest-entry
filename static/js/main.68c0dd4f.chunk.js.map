{"version":3,"sources":["components/Navigation.js","components/Meme.js","components/Body.js","components/Saved.js","components/Error404.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","state","Navbar","className","Container","Brand","Form","FormControl","type","placeholder","Nav","to","exact","activeClassName","Component","Meme","handleSave","axios","post","postLink","subreddit","title","url","then","res","setState","isSaved","catch","err","$","css","setTimeout","handleUnsave","delete","data","hover","this","exists","class","alt","src","Row","Col","xs","onClick","Body","memes","error","unfilteredMemes","get","remove","isError","on","search_value","val","filter","meme","toLowerCase","includes","slice","Math","floor","length","map","key","id","Error404","App","path","component","Saved","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68c0dd4f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Navbar, Nav, Form, FormControl, Container } from 'react-bootstrap';\nimport { NavLink } from \"react-router-dom\";\n\nexport class Navigation extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             \n        }\n    }\n    \n    render() {\n        return (\n            <Navbar className=\"navbar\">\n                <Container className=\" d-flex justify-content-around nav-container\">\n                    <Navbar.Brand><span className=\"nav-title\">PACIL-GAG</span></Navbar.Brand>\n                        \n\n                    <Form className=\"\">\n                        <FormControl type=\"text\" placeholder=\"Search a meme\" className=\"mr-sm-2 searchbar\" />\n                    </Form>\n\n                    <Nav className=\"\">\n                            <NavLink to=\"/\" exact activeClassName=\"font-weight-bold\" className=\"text-light mr-2\">Discover</NavLink>\n                            <NavLink to=\"/saved\" activeClassName=\"font-weight-bold\" className=\"text-light\">Saved Memes</NavLink>\n                    </Nav>\n                </Container>\n            </Navbar>\n        )\n    }\n}\n\nexport default Navigation\n","import React, { Component } from 'react'\n\nimport { Row, Col} from 'react-bootstrap';\nimport $ from \"jquery\"\nimport axios from \"axios\"\n\nexport class Meme extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             isSaved: false\n        }\n    }\n    \n    componentDidMount(){\n        $(function(){\n            $(\".meme\").hover(() => {\n                $(\".hover-blur\").css({\"z-index\":3,\"opacity\":0.7})\n            }, () => {\n                $(\".hover-blur\").css({\"z-index\":1,\"opacity\":0})\n            })\n        })\n        \n        // Check if meme saved or not\n        axios.post(\"http://127.0.0.1:8000/api/check\",{\n            postLink: this.props.postLink,\n            subreddit: this.props.subreddit,\n            title: this.props.title,\n            url: this.props.url\n        })\n        .then(res => this.setState({isSaved: res.data.exists}))\n        .catch(err => () => {\n            $(\".save-error\").css(\"display\",\"block\")\n            setTimeout(() => {\n                $(\".save-error\").css(\"display\",\"none\")\n            }, 3000)\n        })\n    }\n\n    // Saves meme with post request to the saved meme api\n    handleSave = () => {\n        axios.post(\"http://127.0.0.1:8000/api/create\",{\n                postLink: this.props.postLink,\n                subreddit: this.props.subreddit,\n                title: this.props.title,\n                url: this.props.url\n            \n        })\n        .then(res => this.setState({isSaved: true}))\n        .catch(err => {\n            $(\".save-error\").css(\"display\",\"block\")\n            setTimeout(() => {\n                $(\".save-error\").css(\"display\",\"none\")\n            }, 3000)\n        })\n    }\n\n    // Deletes meme from the api\n    handleUnsave = () => {\n        axios.delete(\"http://127.0.0.1:8000/api/delete\",{\n            data : {\n            postLink: this.props.postLink,\n            subreddit: this.props.subreddit,\n            title: this.props.title,\n            url: this.props.url\n            }\n        })\n        .then(res => this.setState({isSaved: false}))\n        .catch(err => {\n            $(\".save-error\").css(\"display\",\"block\")\n            setTimeout(() => {\n                $(\".save-error\").css(\"display\",\"none\")\n            }, 3000)\n        })\n    }\n\n    render() {\n        return (\n            <div class=\"mb-2 meme\">\n                <img className=\"meme-image rounded\" alt=\"meme\" src={this.props.url}></img>\n                <div className=\"p-1 meme-info rounded-bottom\">\n                    <Row>\n                        <Col xs={8}>\n                            <p className=\"m-0 pl-2 text-light font-weight-bold\">{this.props.title}</p>\n                            <p className=\"m-0 pl-2 text-light\">from {this.props.subreddit}</p>\n                        </Col>\n                        <Col xs={4} className=\"text-gold d-flex align-items-center save-button\" onClick={this.state.isSaved ? this.handleUnsave : this.handleSave}>\n                            { this.state.isSaved ? <i class=\"fas fa-bookmark\"></i> : <div><i className=\"far fa-bookmark\"></i></div> }\n                            { this.state.isSaved ? <div className=\"ml-2\">Saved</div> : <div className=\"ml-2\">Save</div> }\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Meme\n","import React, { Component } from 'react'\n\nimport { Container, Row, Col} from 'react-bootstrap';\nimport Meme from \"./Meme\"\nimport axios from \"axios\"\nimport $ from \"jquery\"\n\nexport class Body extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             memes: [],\n             error: false\n        }\n    }\n    \n    componentDidMount(){\n        var unfilteredMemes\n\n        // Get data from Meme API\n        axios.get(\"https://meme-api.herokuapp.com/gimme/10\")\n            .then(res => {\n                $(\".loadingscreen\").remove()\n                this.setState({memes: res.data.memes})\n                unfilteredMemes = this.state.memes\n\n            })\n            .catch(err => {\n                this.setState({...this.state,isError: true})\n            })\n\n        // Search by title\n        $(\".searchbar\").on(\"keyup\",() => {\n            var search_value = $(\".searchbar\").val()\n            if (search_value !== \"\") {\n                this.setState({...this.state,memes: unfilteredMemes.filter(meme => meme.title.toLowerCase().includes(search_value.toLowerCase()))})\n            } else {\n                this.setState({...this.state,memes: unfilteredMemes})\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                { // Check if conencted to the internet\n                this.state.isError ? <div className=\"alert alert-danger\">\n                    An error occurred, please make sure that you are connected to the internet.\n                    </div> : \"\"}\n                \n                {this.state.isError ? \"\"\n                :\n                <div className=\"loadingscreen text-light d-flex flex-column justify-content-center align-items-center\">\n                    <i class=\"fas fa-circle-notch fa-spin mb-3\"></i>\n                    <h2>Loading Memes...</h2>\n                </div>\n                }\n                <Container>\n                    <Row>\n                        <Col className=\"d-flex justify-content-start align-items-center flex-column mt-2 meme-column\">\n                            {this.state.memes.slice(2*Math.floor(this.state.memes.length/3),this.state.memes.length).map(meme => \n                            /* Shows meme in 3 panels divided almost equally */\n                            /* Leftmost Panel */\n                            <Row>\n                               <Meme\n                                postLink={meme.postLink}\n                                subreddit={meme.subreddit}\n                                title={meme.title}\n                                url={meme.url}\n                               />\n                            </Row> \n                            )}\n                        </Col>\n                        <Col className=\"d-flex justify-content-start align-items-center flex-column mt-2 meme-column\">\n                            {this.state.memes.slice(Math.floor(this.state.memes.length/3),2*Math.floor(this.state.memes.length/3)).map(meme => \n                            /* Middle Panel */\n                                <Row>\n                                <Meme\n                                    postLink={meme.postLink}\n                                    subreddit={meme.subreddit}\n                                    title={meme.title}\n                                    url={meme.url}\n                                />\n                                </Row> \n                            )}\n                        </Col>\n                        <Col className=\"d-flex justify-content-start align-items-center flex-column mt-2 meme-column\">\n                            {this.state.memes.slice(0,Math.floor(this.state.memes.length/3)).map(meme => \n                            /* Rightmost Panel */\n                                <Row>\n                                <Meme\n                                    postLink={meme.postLink}\n                                    subreddit={meme.subreddit}\n                                    title={meme.title}\n                                    url={meme.url}\n                                />\n                                </Row> \n                            )}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Body\n","import React, { Component } from 'react'\n\nimport { Container, Row, Col} from 'react-bootstrap';\nimport Meme from \"./Meme\"\nimport axios from \"axios\"\nimport $ from \"jquery\"\n\nexport class Body extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             memes: [],\n             error: false\n        }\n    }\n    \n    componentDidMount(){\n        var unfilteredMemes\n        axios.get(\"http://127.0.0.1:8000/api/\")\n            .then(res => {\n                this.setState({memes: res.data})\n                unfilteredMemes = this.state.memes\n            })\n            .catch(err => {\n                this.setState({...this.state,isError: true})\n            })\n\n        $(\".searchbar\").on(\"keyup\",() => {\n            var search_value = $(\".searchbar\").val()\n            if (search_value !== \"\") {\n                this.setState({...this.state,memes: unfilteredMemes.filter(meme => meme.title.toLowerCase().includes(search_value.toLowerCase()))})\n            } else {\n                this.setState({...this.state,memes: unfilteredMemes})\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isError ? <div className=\"alert alert-danger\">\n                    An error occurred, please make sure the Django server is running or try refreshing the page.\n                    </div> : \"\"}\n                <Container>\n                    <div className=\"text-light m-2 text-center\">\n                        <h4>Saved Memes</h4>\n                        <p>There are the memes that you love</p>\n                    </div>\n                    { this.state.memes.length !== 0 || this.state.isError ? \n                        \"\"\n                        :\n                        <div className=\"text-light m-2 text-center\">\n                            <h1>You have no saved memes</h1>\n                            <h3>Why not save some to laugh at it later?</h3>\n                        </div>\n                    }\n                    <Row>\n                        <Col className=\"d-flex justify-content-start align-items-center flex-column mt-2 meme-column\">\n                            {this.state.memes.slice(2*Math.floor(this.state.memes.length/3),this.state.memes.length).map(meme => \n                            /* Leftmost Panel */\n                            <Row>\n                               <Meme\n                                    key={meme.id}\n                                    postLink={meme.postLink}\n                                    subreddit={meme.subreddit}\n                                    title={meme.title}\n                                    url={meme.url}\n                               />\n                            </Row> \n                            )}\n                        </Col>\n                        <Col className=\"d-flex justify-content-start align-items-center flex-column mt-2 meme-column\">\n                            {this.state.memes.slice(Math.floor(this.state.memes.length/3),2*Math.floor(this.state.memes.length/3)).map(meme => \n                            /* Middle Panel */\n                                <Row>\n                                <Meme\n                                    key={meme.id}\n                                    postLink={meme.postLink}\n                                    subreddit={meme.subreddit}\n                                    title={meme.title}\n                                    url={meme.url}\n                                />\n                                </Row> \n                            )}\n                        </Col>\n                        <Col className=\"d-flex justify-content-start align-items-center flex-column mt-2 meme-column\">\n                            {this.state.memes.slice(0,Math.floor(this.state.memes.length/3)).map(meme => \n                            /* Rightmost Panel */\n                                <Row>\n                                <Meme\n                                    key={meme.id}\n                                    postLink={meme.postLink}\n                                    subreddit={meme.subreddit}\n                                    title={meme.title}\n                                    url={meme.url}\n                                />\n                                </Row> \n                            )}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default Body\n","import React, { Component } from 'react'\n\nexport class Error404 extends Component {\n    render() {\n        return (\n            <div className=\"text-center mt-3\">\n                <h1 className=\"text-light\">404 Not Found</h1>\n                <h3 className=\"text-light\">Did you type the link correctly?</h3>\n            </div>\n        )\n    }\n}\n\nexport default Error404\n","import React from 'react';\n\nimport Navigation from './components/Navigation'\nimport Body from './components/Body'\nimport Saved from './components/Saved'\nimport Error404 from './components/Error404'\n\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"hover-blur\"></div>\n    <div className=\"alert alert-danger position-fixed save-error text-center\">\n      <p className=\"m-0\">Error while saving meme</p>\n      <p className=\"m-0\">Please make sure the Django server or your internet is running</p>\n    </div>\n      <BrowserRouter>\n        <Navigation className=\"navbar\" />\n          <Switch>\n            <Route exact path=\"/compfest-entry\" component={Body} />\n            <Route exact path=\"/saved\" component={Saved} />\n            <Route component={Error404} />\n          </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}